import React, { useState, useEffect } from 'react';

const KanbanBoard = () => {
  const [tickets, setTickets] = useState([]);
  const [groupingOption, setGroupingOption] = useState('status'); // Default grouping option

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('https://api.quicksell.co/v1/internal/frontend-assignment');
        const data = await response.json();
        setTickets(data);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
  }, []); // Fetch data when component mounts

  return (
    <div>
      {/* Your Kanban board components will go here */}
    </div>
  );
};

export default KanbanBoard;

//display tickets based on grouping option
const groupTicketsByStatus = (tickets) => {
  // Implementation to group tickets by status
};

const groupTicketsByUser = (tickets) => {
  // Implementation to group tickets by user
};

const groupTicketsByPriority = (tickets) => {
  // Implementation to group tickets by priority
};

//display tickets based on sorting option
const sortTicketsByPriority = (tickets) => {
  // Implementation to sort tickets by priority
};

const sortTicketsByTitle = (tickets) => {
  // Implementation to sort tickets by title
};

//use local storage to save and retrieve
useEffect(() => {
  // Save to localStorage when tickets or groupingOption changes
  localStorage.setItem('kanbanState', JSON.stringify({ tickets, groupingOption }));
}, [tickets, groupingOption]);

useEffect(() => {
  // Retrieve from localStorage when component mounts
  const savedState = localStorage.getItem('kanbanState');
  if (savedState) {
    const { tickets, groupingOption } = JSON.parse(savedState);
    setTickets(tickets);
    setGroupingOption(groupingOption);
  }
}, []); // Load from localStorage when component mounts

